
"""
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""
package(default_visibility = ["{{path_prefix}}:__subpackages__"])

load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    {% for target in crate.targets %}
    "rust_{{target.type}}",
    {% endfor %}
)
{%- for platform in platforms -%}
{%- if crate.build_script -%}

rust_binary(
    name = "{{ crate.name | replace '-', '_'  }}_build_script_{{platform.triple | replace '-', '_' }}",
    srcs = glob(["*", "src/**/*.rs"]),
    crate_root = {% if crate.build_script.path %}"{{ crate.build_script.path }}"{% else %}"build.rs"{% endif %},
    {%- if crate.dependencies.size > 0 or crate.build_dependencies.size > 0 -%}
    deps = [
      {%- for dependency in crate.dependencies | concat: crate.build_dependencies | uniq | sort -%}
        "{{path_prefix}}/vendor/{{dependency.name}}-{{dependency.version}}:{{dependency.name | replace '-', '_' }}_{{platform.triple | replace '-', '_'}}",
      {%- endfor -%}
    ]
    rustc_flags = [
        "--cap-lints allow",
        "--target={{platform.triple}}"
    ],
    {% endif %}
    {%- if platform.features.size > 0 -%}
    crate_features = [
      {%- for feature in platform.features | sort -%}
      "{{feature}}",
      {%- endfor -%}
    ],
    {%- endif -%}
    visibility = ["//visibility:private"],
)

genrule(
    name = "{{ crate.name | replace '-', '_'  }}_build_script_executor_{{ platform.triple | replace '-', '_' }}",
    srcs = glob(["*", "src/**/*.rs"]),
    outs = ["{{ crate.name | replace '-', '_'  }}_{{platform.triple | replace '-', '_' }}_out_dir_outputs.tar.gz"],
    tools = [":{{ crate.name | replace '-', '_'  }}_build_script_{{platform.triple | replace '-', '_' }}"],
    cmd = "mkdir {{ crate_name | replace '-', '_'}}_out_dir_outputs_{{ platform.triple | replace '-', '_' }}/;"
        + " (export CARGO_MANIFEST_DIR=\"$$PWD{{ path_prefix | remove_first: '/' }}/vendor/{{ crate.name }}-{{ crate.version }}\";"
        + " export TARGET='{{ platform.triple }}';"
        + " export RUST_BACKTRACE=1;"
        + " export OUT_DIR=$$PWD/{{ crate.name | replace '-', '_' }}_out_dir_outputs_{{ platform.triple | replace '-', '_' }};"
        + " export BINARY_PATH=\"$$PWD/$(location :{{ crate.name | replace '-', '_' }}_build_script_{{ platform.triple | replace '-', '_' }})\";"
        + " export OUT_TAR=$$PWD/$@;"
        + " cd $$(dirname $(location :Cargo.toml)) && $$BINARY_PATH && tar -czf $$OUT_TAR -C $$OUT_DIR .)"
)
{%- endif -%}
{%- for target in crate.targets -%}

rust_{{target.type}}(
    name = "{{ crate.name | replace '-', '_'  }}_{{platform.triple | replace '-', '_' }}",
    crate_root = "{{ target.root_path }}",
    srcs = glob(["lib.rs", "src/**/*.rs"]),
    {%- if crate.dependencies.size > 0 -%}
    deps = [
    {%- for dependency in crate.dependencies | sort -%}
        "{{path_prefix}}/vendor/{{dependency.name}}-{{dependency.version}}:{{dependency.name | replace '-', '_' }}_{{platform.triple | replace '-', '_'}}",
    {%- endfor -%}
    ],
    {% endif %}
    rustc_flags = [
        "--cap-lints allow",
        "--target={{platform.triple}}"
    ],
    artifact_name = "{{crate.name}}"
    {% if crate.build_script %}
    out_dir_tar = ":{{ crate.name }}_build_script_executor_{{platform.triple}}",
    {% endif %}
    crate_features = [
      {%- for feature in platform.features | sort -%}
      "{{feature}}",
      {%- endfor -%}
    ],
)
{%- endfor -%}
{%- endfor -%}

rust_library(
    name = "thread_id_i686_pc_windows_msvc",
    crate_root = "src/lib.rs",
    srcs = glob(["lib.rs", "src/**/*.rs"]),
    deps = ["//hello_cargo_library/vendor/kernel32-sys-0.2.2:kernel32_sys"],
    rustc_flags = [
        "--cap-lints allow",
    ],
    out_dir_tar = None,
    crate_features = [],
)
